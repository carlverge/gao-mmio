--- /usr/src/linux-source-3.5.0/drivers/net/ethernet/intel/e1000/e1000_main.c	2012-10-19 06:27:04.000000000 -0400
+++ ./e1000_main.c	2013-01-22 14:38:15.797429285 -0500
@@ -233,6 +233,8 @@
 	return adapter->netdev;
 }
 
+#include "gao_e1000.h"
+
 /**
  * e1000_init_module - Driver Registration Routine
  *
@@ -399,6 +401,12 @@
 	/* call E1000_DESC_UNUSED which always leaves
 	 * at least 1 descriptor unused to make sure
 	 * next_to_use != next_to_clean */
+#ifdef GAO_E1000_H_
+	if(adapter->netdev->priv_flags & IFF_GAO_ENABLED) {
+		gao_e1000_activate_port(adapter->netdev);
+		return;
+	}
+#endif
 	for (i = 0; i < adapter->num_rx_queues; i++) {
 		struct e1000_rx_ring *ring = &adapter->rx_ring[i];
 		adapter->alloc_rx_buf(adapter, ring,
@@ -540,6 +548,11 @@
 	adapter->link_duplex = 0;
 	netif_carrier_off(netdev);
 
+#ifdef GAO_E1000_H_
+	gao_e1000_deactivate_port(netdev);
+#endif
+
+
 	e1000_reset(adapter);
 	e1000_clean_all_tx_rings(adapter);
 	e1000_clean_all_rx_rings(adapter);
@@ -1238,6 +1251,10 @@
 	/* carrier off reporting is important to ethtool even BEFORE open */
 	netif_carrier_off(netdev);
 
+#ifdef GAO_E1000_H_
+	gao_e1000_register_port(netdev);
+#endif
+
 	e_info(probe, "Intel(R) PRO/1000 Network Connection\n");
 
 	cards_found++;
@@ -1286,6 +1303,10 @@
 
 	unregister_netdev(netdev);
 
+#ifdef GAO_E1000_H_
+	gao_e1000_unregister_port(netdev);
+#endif
+
 	e1000_phy_hw_reset(hw);
 
 	kfree(adapter->tx_ring);
@@ -3141,6 +3162,14 @@
 	int tso;
 	unsigned int f;
 
+#ifdef GAO_E1000_H_
+	//Drop frames coming from normal userspace methods
+	if(netdev->priv_flags & IFF_GAO_ENABLED) {
+		consume_skb(skb);
+		return NETDEV_TX_OK;
+	}
+#endif
+
 	/* This goes back to the question of how to logically map a tx queue
 	 * to a flow.  Right now, performance is impacted slightly negatively
 	 * if using multiple tx queues.  If the stack breaks away from a
@@ -3801,6 +3830,13 @@
 			schedule_delayed_work(&adapter->watchdog_task, 1);
 	}
 
+#ifdef GAO_E1000_H_
+	if(adapter->netdev->priv_flags & IFF_GAO_ENABLED) {
+		//gao_e1000e_handle_tx_irq(netdev, adapter, tx_ring);
+		return IRQ_HANDLED;
+	}
+#endif
+
 	/* disable interrupts, without the synchronize_irq bit */
 	ew32(IMC, ~0);
 	E1000_WRITE_FLUSH();
